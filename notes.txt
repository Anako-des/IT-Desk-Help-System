
Project Documentation: IT Helpdesk Application

This document provides an overview of the IT Helpdesk application built with Reflex, including its structure, key components, and database interactions.

1. Project Structure:

    - app/
        - __init__.py: Initializes the app module.
        - app.py: Main application file, defines the Reflex app, routes, sidebar, dashboard components, and authentication logic.
        - login_page.py: Defines the user login interface.
        - user_dashboard.py: Defines the dashboard for regular users, displaying their tickets.
        - users_page.py: Contains components and logic for managing users (admin view).
        - computers_page.py: Contains components and logic for managing computers (admin view).
        - ra_page.py: Contains components and logic for managing Resource Assignments (RA) (admin view).
        - services_page.py: Contains components and logic for managing Services (admin view).
        - states/
            - __init__.py: Initializes the states module.
            - auth_state.py: Manages user authentication state, login/logout, and user roles (admin/normal user).
            - computer_state.py: Manages the state and operations for computer devices (CRUD operations).
            - ra_state.py: Manages the state and operations for Resource Assignments (CRUD operations).
            - service_state.py: Manages the state and operations for services (CRUD operations).
            - ticket_state.py: Manages the state and operations for support tickets (dashboard, CRUD operations, filtering).
    - assets/
        - __init__.py: Initializes the assets module.
        - favicon.ico: Application favicon.
        - placeholder.svg: Generic image placeholder.
    - .gitignore: Specifies intentionally untracked files to ignore.
    - requirements.txt: Lists all Python dependencies required for the project.
    - rxconfig.py: Reflex configuration file, including Tailwind CSS plugin setup.
    - notes.txt: This documentation file.

2. Database Schema and Usage:

    The application interacts with a MySQL database to store and manage helpdesk data. Below is the updated schema:

    - `user` table:
        - `ID` (INT, PRIMARY KEY, AUTO_INCREMENT): Unique identifier for the user.
        - `name` (VARCHAR): Full name of the user.
        - `email` (VARCHAR, UNIQUE): User's email address, used for login.
        - `contrasenna` (VARCHAR): User's password (hashed in a real-world scenario).
        - `area` (VARCHAR): Department or area the user belongs to.
        - Used for: User authentication, displaying user information in RA.

    - `Dispositivos` (Computers) table:
        - `nserie` (VARCHAR, PRIMARY KEY): Serial number of the device.
        - `name` (VARCHAR): Name of the device.
        - `marca` (VARCHAR): Brand of the device.
        - `fechaS` (DATE): Acquisition or deployment date.
        - `tipo` (VARCHAR): Type of device (e.g., Laptop, Desktop, Software).
        - Used for: Managing computer assets, linked to RA.

    - `Servicios` table:
        - `ID` (INT, PRIMARY KEY, AUTO_INCREMENT): Unique identifier for the service.
        - `nombre` (VARCHAR): Name of the service.
        - `caracteristicas` (TEXT): Description of the service features.
        - `tipo` (VARCHAR): Type of service (e.g., Hardware, Software).
        - Used for: Managing available services.

    - `RA` (Resource Assignment) table:
        - `ID` (INT, PRIMARY KEY, AUTO_INCREMENT): Unique identifier for the assignment.
        - `user_id` (INT, FOREIGN KEY to `user.ID`): User to whom the device is assigned.
        - `dispositivo_nserie` (VARCHAR, FOREIGN KEY to `Dispositivos.nserie`): Serial number of the assigned device.
        - `fechaA` (DATE): Assignment date.
        - `comentarios` (TEXT): Any relevant comments about the assignment.
        - Used for: Linking users to their assigned devices.

    - `Mantenimiento` (Maintenance) table:
        - `ID` (INT, PRIMARY KEY, AUTO_INCREMENT): Unique identifier for the maintenance record.
        - `computer_nserie` (VARCHAR, FOREIGN KEY to `Dispositivos.nserie`): Device that underwent maintenance.
        - `tipo` (VARCHAR): Type of maintenance.
        - `descripcion` (TEXT): Description of the maintenance performed.
        - `fecha` (DATETIME): Date and time of maintenance.
        - Note: This table is present in the schema but not fully implemented in the current UI for CRUD.

    - `Ticket` table:
        - `ID` (INT, PRIMARY KEY, AUTO_INCREMENT): Unique identifier for the ticket.
        - `folio` (VARCHAR, UNIQUE): Unique ticket reference number.
        - `ra_id` (INT, FOREIGN KEY to `RA.ID`): Reference to the user-device assignment (who submitted the ticket about what device).
        - `servicio_id` (INT, FOREIGN KEY to `Servicios.ID`): Reference to the service requested.
        - `descripcion` (TEXT): Description of the issue.
        - `foto` (VARCHAR): URL or path to an image related to the ticket.
        - `comentarios` (TEXT): Internal comments on the ticket.
        - `fechaI` (DATETIME): Date and time of ticket creation.
        - `estado` (VARCHAR): Current status of the ticket (e.g., Hold, Working, Finish).
        - `fechaF` (DATETIME): Date and time of ticket completion.
        - Used for: Managing support tickets, displayed in dashboards.

3. Key Features and Implementations:

    - User Authentication (`app/states/auth_state.py`, `app/login_page.py`):
        - Users can log in using their email and password.
        - Special admin login: `jhernandez` / `123456789`.
        - Normal user authentication: Queries the `user` table for email and `contrasenna`.
        - Redirects to appropriate dashboard (admin/user) upon successful login.
        - Session management via `rx.Cookie`.

    - Admin Dashboard (`app/app.py`, `app/states/ticket_state.py`):
        - Displays ticket statistics (Hold, Working, Finish counts).
        - Shows a searchable and filterable table of all tickets.
        - Provides CRUD (Create, Read, Update, Delete) functionality for tickets via modals and alerts.

    - User Dashboard (`app/user_dashboard.py`, `app/states/ticket_state.py`):
        - Displays tickets submitted by the logged-in user.
        - Allows users to add new tickets.

    - CRUD Pages for Admin (`app/users_page.py`, `app/computers_page.py`, `app/ra_page.py`, `app/services_page.py`):
        - Each page (Users, Computers, RA, Services) provides:
            - A table listing existing entries.
            - Search functionality to filter entries.
            - Buttons to "Add", "Edit" (via modal), and "Delete" (via alert) entries.
            - Database interactions for each CRUD operation (INSERT, SELECT, UPDATE, DELETE).

    - SQL Query Documentation Examples:
        - `AuthState.login`: `SELECT ID, name, email, contrasenna, area FROM user WHERE email = :email`
            - Purpose: Authenticates a user by fetching their details based on the provided email.
        - `ComputerState.load_computers`: `SELECT nserie, name, marca, DATE_FORMAT(fechaS, '%Y-%m-%d') as fechaS, tipo FROM Dispositivos ORDER BY name`
            - Purpose: Retrieves all computer records from the `Dispositivos` table, formatting the date.
        - `ComputerState.add_computer`: `INSERT INTO Dispositivos (nserie, name, marca, fechaS, tipo) VALUES (:nserie, :name, :marca, CURDATE(), :tipo)`
            - Purpose: Inserts a new computer record into the `Dispositivos` table with the current date.
        - `RAState.load_all_data`:
            sql
            SELECT RA.ID, RA.user_id, RA.dispositivo_nserie, DATE_FORMAT(RA.fechaA, '%Y-%m-%d') as fechaA,
            RA.comentarios, user.name as user_name, Dispositivos.name as dispositivo_name
            FROM RA
            JOIN user ON RA.user_id = user.ID
            JOIN Dispositivos ON RA.dispositivo_nserie = Dispositivos.nserie
            ORDER BY RA.fechaA DESC
            
            - Purpose: Fetches all resource assignments along with linked user and device names.
        - `TicketState.load_user_tickets`:
            sql
            SELECT t.ID, t.folio, t.descripcion, t.estado as status
            FROM Ticket t
            JOIN RA ra ON t.ra_id = ra.ID
            WHERE ra.user_id = :user_id
            ORDER BY t.fechaI DESC
            
            - Purpose: Retrieves tickets specific to a given user ID by joining with the `RA` table.

    - Styling:
        - Uses Tailwind CSS for all styling.
        - Consistent color palette: #EAEFF3 (background), #C00264 (primary accent), #B2419B (secondary accent), #EDCD00 (yellow, not explicitly used but available), #F25D07 (orange for working tickets).
        - Inter font family for typography.
        - Responsive design for various screen sizes.

4. Reflex Concepts Used:

    - `rx.State`: Centralized logic and data management for each feature (Auth, Ticket, User, Computer, RA, Service).
    - `rx.event`: Handles user interactions and updates state variables, often triggering database operations.
    - `rx.var`: Computed properties that automatically re-render when their dependencies change (e.g., `filtered_tickets`).
    - `rx.cond` and `rx.match`: Conditional rendering for UI elements based on state variables (e.g., login status, ticket status).
    - `rx.foreach`: Efficiently renders lists of components based on state data (e.g., table rows).
    - Components: Reusable UI elements (e.g., `sidebar_item`, `stat_card`, `form_field`).
    - Dialogs and Alerts: Used for interactive forms (add/edit) and confirmation messages (delete).

This documentation provides a comprehensive overview of the IT Helpdesk application, its underlying database, and how various features are implemented using the Reflex framework.
